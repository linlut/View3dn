
uniform int4 edge_table[30] = {
	{0, 0, 0, 0},
	{3, 0, 3, 1},
	{2, 1, 2, 0},
	{2, 0, 3, 0},
	{1, 2, 1, 3},
	{1, 0, 1, 2},
	{1, 0, 2, 0},
	{3, 0, 1, 0},
	{0, 2, 0, 1},
	{0, 1, 3, 1},
	{0, 1, 0, 3},
	{3, 1, 2, 1},
	{0, 2, 1, 2},
	{1, 2, 3, 2},
	{0, 3, 2, 3},

	{0, 0, 0, 1},
	{3, 2, 0, 0},
	{2, 3, 0, 0},
	{2, 1, 3, 1},
	{1, 0, 0, 0},
	{3, 0, 3, 2},
	{1, 3, 2, 3},
	{2, 0, 0, 0},
	{0, 3, 0, 0},
	{0, 2, 3, 2},
	{2, 1, 2, 3},
	{0, 1, 0, 0},
	{0, 3, 1, 3},
	{0, 2, 0, 0},
	{1, 3, 0, 0}
};

class SampleData
{
	float4 Pos   : POSITION;
	float3 UV    : TEXCOORD0;
	float2 Field : TEXCOORD1;
	float3 WPos  : TEXCOORD2;
	float4 Color : COLOR0;
};

uniform float3x3 WorldViewIT : state.matrix.modelview.invtrans;
uniform float4x4 WorldViewProj : state.matrix.mvp;
uniform float IsoValue = 1;
uniform float StepLength = 0.0005;
uniform float3 viewpos={1, 0, 0};
uniform float3 viewdir={-0.707, -0.707, 0};

//Compute the depth value
// x: a world point
// p0: viewpoint position
// n: view direction
float compute_isovalue(float3 x, float3 p0, float3 n)
{
	const float a = dot(x, n);
	const float b = dot(p0, n);
	return a-b;
}

// Vertex shader
//Input: clr encodes the rotatio quaternion
//       tex0 encodes the texture coordinate of the vertex
SampleData vertexShaderMain(float3 pos : POSITION, float4 clr: COLOR0, float3 tex0: TEXCOORD0)
{
	SampleData o;
	// Transform position 
	o.Pos = mul(WorldViewProj, float4(pos, 1));
	o.UV = tex0;
	o.WPos = pos;
	o.Color = clr;
	o.Field.y = compute_isovalue(pos, viewpos, viewdir);
	o.Field.x = IsoValue* 0.01;
	return o;
}

// Estimate where isosurface intersects grid edge with endpoints v0, v1
void CalcIntersection(float isovalue,
					  float4 pos0,  //Position
					  float3 wpos0,  //World Position
					  float4 quat0,	//Rotation quaternion
					  float3 uv0,	//3D Texture coordinate
					  float2 field0,//Field value 
					  float4 pos1,
					  float3 wpos1,
					  float4 quat1,	
					  float3 uv1,
					  float2 field1)
{
	const float t = (isovalue - field0.y) / (field1.y - field0.y);
	float4 pos = lerp(pos0, pos1, t);
	float3 wpos = lerp(wpos0, wpos1, t);
	float4 quat = lerp(quat0, quat1, t);
	float3 uv = lerp(uv0, uv1, t);
	emitVertex(pos:POSITION, quat:COLOR0, uv:TEXCOORD0, wpos:TEXCOORD1);
}

/*
void marchingTetrahedra(
	const float isovalue,
	float4 Pos[4],	//Viewpoint position
	float3 WPos[4],	//World position
	float4 Quat[4],
	float3 UV[4],
	float2 Field[4])
{
	// construct index for this tetrahedron
	const int I0 = (Field[0].y > isovalue) ? 1 : 0;
	const int I1 = (Field[1].y > isovalue) ? 1 : 0;
	const int I2 = (Field[2].y > isovalue) ? 1 : 0;
	const int I3 = (Field[3].y > isovalue) ? 1 : 0;
	const int index = (I0 << 3) | (I1 << 2) | (I2 << 1) | I3;
	if (index && index < 15){
		const int4 e0 = edge_table[index];
		const int4 e1 = edge_table[index+15];
		// Emit a triangle
		CalcIntersection(isovalue, 
						Pos[e0.x], WPos[e0.x], Quat[e0.x], UV[e0.x], Field[e0.x], 
						Pos[e0.y], WPos[e0.y], Quat[e0.y], UV[e0.y], Field[e0.y]);
		CalcIntersection(isovalue, 
						Pos[e0.z], WPos[e0.z], Quat[e0.z], UV[e0.z], Field[e0.z], 
						Pos[e0.w], WPos[e0.w], Quat[e0.w], UV[e0.w], Field[e0.w]);
		CalcIntersection(isovalue, 
						Pos[e1.x], WPos[e1.x], Quat[e1.x], UV[e1.x], Field[e1.x], 
						Pos[e1.y], WPos[e1.y], Quat[e1.y], UV[e1.y], Field[e1.y]);
		// Emit additional triangle, if necessary
		if (e1.z) 
		CalcIntersection(isovalue, 
						Pos[e1.z], WPos[e1.z], Quat[e1.z], UV[e1.z], Field[e1.z], 
						Pos[e1.w], WPos[e1.w], Quat[e1.w], UV[e1.w], Field[e1.w]);
		EndPrimitive();
	}
//	else{
		//discard;
//		emitVertex();
//		EndPrimitive();
//	}
}
*/

void marchingTetrahedra(
	const float isovalue,
	AttribArray<float4> Pos,	//Viewpoint position
	AttribArray<float3> WPos,	//World position
	AttribArray<float4> Quat,
	AttribArray<float3> UV,
	AttribArray<float2> Field)
{
	// construct index for this tetrahedron
	const int I0 = (Field[0].y > isovalue) ? 1 : 0;
	const int I1 = (Field[1].y > isovalue) ? 1 : 0;
	const int I2 = (Field[2].y > isovalue) ? 1 : 0;
	const int I3 = (Field[3].y > isovalue) ? 1 : 0;
	const int index = (I0 << 3) | (I1 << 2) | (I2 << 1) | I3;
	if (index && index < 15){
		const int4 e0 = edge_table[index];
		const int4 e1 = edge_table[index+15];
		// Emit a triangle
		CalcIntersection(isovalue, 
						Pos[e0.x], WPos[e0.x], Quat[e0.x], UV[e0.x], Field[e0.x], 
						Pos[e0.y], WPos[e0.y], Quat[e0.y], UV[e0.y], Field[e0.y]);
		CalcIntersection(isovalue, 
						Pos[e0.z], WPos[e0.z], Quat[e0.z], UV[e0.z], Field[e0.z], 
						Pos[e0.w], WPos[e0.w], Quat[e0.w], UV[e0.w], Field[e0.w]);
		CalcIntersection(isovalue, 
						Pos[e1.x], WPos[e1.x], Quat[e1.x], UV[e1.x], Field[e1.x], 
						Pos[e1.y], WPos[e1.y], Quat[e1.y], UV[e1.y], Field[e1.y]);
		// Emit additional triangle, if necessary
		if (e1.z) 
		CalcIntersection(isovalue, 
						Pos[e1.z], WPos[e1.z], Quat[e1.z], UV[e1.z], Field[e1.z], 
						Pos[e1.w], WPos[e1.w], Quat[e1.w], UV[e1.w], Field[e1.w]);
		EndPrimitive();
	}
//	else{
		//discard;
//		emitVertex();
//		EndPrimitive();
//	}
}


// Geometry shader
// input: line with adjacency (tetrahedron)
// outputs: zero, one or two triangles depending if isosurface intersects tetrahedron
LINE_ADJ
TRIANGLE_OUT
void geometryShaderMain(
	AttribArray<float4> Pos : POSITION,
	AttribArray<float4> Quat : COLOR0,
	AttribArray<float3> UV : TEXCOORD0,
	AttribArray<float2> Field : TEXCOORD1,
	AttribArray<float3> WPos : TEXCOORD2)
{
	/*
	float4 pos[4]={Pos[0], Pos[1], Pos[2], Pos[3]};
	float4 quat[4]={Quat[0], Quat[1], Quat[2], Quat[3]};
	float3 uv[4]={UV[0], UV[1], UV[2], UV[3]};
	float2 field[4]={Field[0], Field[1], Field[2], Field[3]};
	float3 wpos[4]={WPos[0], WPos[1], WPos[2], WPos[3]};
	*/
	float isovalue = Field[0].x * 100; //IsoValue;
	float steplen = StepLength*0.50;
	for (int i=0; i<2; i++){
		marchingTetrahedra(isovalue, Pos, WPos, Quat, UV, Field);
		isovalue+=steplen;
	}

/*
	float dh = StepLength*0.50;
	isovalue+=dh;
	marchingTetrahedra(isovalue, pos, wpos, quat, uv, field);

	isovalue+=dh;
	marchingTetrahedra(isovalue, pos, wpos, quat, uv, field);

	isovalue+=dh;
	marchingTetrahedra(isovalue, pos, wpos, quat, uv, field);
*/
}
