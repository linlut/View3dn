/*FILE: sphere16.cpp

This file defines and renders a sphere centered at (0,0,0). 
It can be scaled with radius r. The normals can be reversed, too.

The sphere subdivion is fixed into 16 pieces.
 */

#ifdef WIN32
#include <windows.h>
#endif
#include <GL/gl.h>
#include <vectorall.h>
#include <geomath.h>
#include <ogldrawall.h>
#include "sphere16.h"

const int NV = 98;
const int NT = 192;

static float vert[NV*3]={
0,0.707106781187,-0.707106781187,
0,0.923879532511,-0.382683432365,
0,1,-6.12303176911E-017,
-0.291384800482,0.703465137194,-0.648252804699,
-0.353898386926,0.868499788675,-0.347079311977,
-0.382683432365,0.923879532511,-6.12303176911E-017,
-0.584834282657,0.584834282657,-0.562083377852,
-0.675847722175,0.675847722175,-0.294040325232,
-0.707106781187,0.707106781187,-6.12303176911E-017,
0,0,-1,
0,0.382683432365,-0.923879532511,
-0.382683432365,2.34318281388E-017,-0.923879532511,
-0.374639142351,0.374639142351,-0.848110267617,
-0.707106781187,4.32963728536E-017,-0.707106781187,
-0.703465137194,0.291384800482,-0.648252804699,
-0.868499788675,0.353898386926,-0.347079311977,
-0.923879532511,0.382683432365,-6.12303176911E-017,
-0.923879532511,5.6569437284E-017,-0.382683432365,
-1,6.12303176911E-017,-6.12303176911E-017,
0,0.707106781187,0.707106781187,
0,0.923879532511,0.382683432365,
-0.291384800482,0.703465137194,0.648252804699,
-0.353898386926,0.868499788675,0.347079311977,
-0.584834282657,0.584834282657,0.562083377852,
-0.675847722175,0.675847722175,0.294040325232,
0,0,1,
0,0.382683432365,0.923879532511,
-0.382683432365,2.34318281388E-017,0.923879532511,
-0.374639142351,0.374639142351,0.848110267617,
-0.707106781187,4.32963728536E-017,0.707106781187,
-0.703465137194,0.291384800482,0.648252804699,
-0.868499788675,0.353898386926,0.347079311977,
-0.923879532511,5.6569437284E-017,0.382683432365,
0.707106781187,0,-0.707106781187,
0.923879532511,0,-0.382683432365,
1,0,-6.12303176911E-017,
0.703465137194,0.291384800482,-0.648252804699,
0.868499788675,0.353898386926,-0.347079311977,
0.923879532511,0.382683432365,-6.12303176911E-017,
0.584834282657,0.584834282657,-0.562083377852,
0.675847722175,0.675847722175,-0.294040325232,
0.707106781187,0.707106781187,-6.12303176911E-017,
0.382683432365,0,-0.923879532511,
0.374639142351,0.374639142351,-0.848110267617,
0.291384800482,0.703465137194,-0.648252804699,
0.353898386926,0.868499788675,-0.347079311977,
0.382683432365,0.923879532511,-6.12303176911E-017,
0.707106781187,0,0.707106781187,
0.923879532511,0,0.382683432365,
0.703465137194,0.291384800482,0.648252804699,
0.868499788675,0.353898386926,0.347079311977,
0.584834282657,0.584834282657,0.562083377852,
0.675847722175,0.675847722175,0.294040325232,
0.382683432365,0,0.923879532511,
0.374639142351,0.374639142351,0.848110267617,
0.291384800482,0.703465137194,0.648252804699,
0.353898386926,0.868499788675,0.347079311977,
-0.703465137194,-0.291384800482,-0.648252804699,
-0.868499788675,-0.353898386926,-0.347079311977,
-0.923879532511,-0.382683432365,-6.12303176911E-017,
-0.584834282657,-0.584834282657,-0.562083377852,
-0.675847722175,-0.675847722175,-0.294040325232,
-0.707106781187,-0.707106781187,-6.12303176911E-017,
-2.34318281388E-017,-0.382683432365,-0.923879532511,
-0.374639142351,-0.374639142351,-0.848110267617,
-4.32963728536E-017,-0.707106781187,-0.707106781187,
-0.291384800482,-0.703465137194,-0.648252804699,
-0.353898386926,-0.868499788675,-0.347079311977,
-0.382683432365,-0.923879532511,-6.12303176911E-017,
-5.6569437284E-017,-0.923879532511,-0.382683432365,
-6.12303176911E-017,-1,-6.12303176911E-017,
-0.703465137194,-0.291384800482,0.648252804699,
-0.868499788675,-0.353898386926,0.347079311977,
-0.584834282657,-0.584834282657,0.562083377852,
-0.675847722175,-0.675847722175,0.294040325232,
-2.34318281388E-017,-0.382683432365,0.923879532511,
-0.374639142351,-0.374639142351,0.848110267617,
-4.32963728536E-017,-0.707106781187,0.707106781187,
-0.291384800482,-0.703465137194,0.648252804699,
-0.353898386926,-0.868499788675,0.347079311977,
-5.6569437284E-017,-0.923879532511,0.382683432365,
0.291384800482,-0.703465137194,-0.648252804699,
0.353898386926,-0.868499788675,-0.347079311977,
0.382683432365,-0.923879532511,-6.12303176911E-017,
0.584834282657,-0.584834282657,-0.562083377852,
0.675847722175,-0.675847722175,-0.294040325232,
0.707106781187,-0.707106781187,-6.12303176911E-017,
0.374639142351,-0.374639142351,-0.848110267617,
0.703465137194,-0.291384800482,-0.648252804699,
0.868499788675,-0.353898386926,-0.347079311977,
0.923879532511,-0.382683432365,-6.12303176911E-017,
0.291384800482,-0.703465137194,0.648252804699,
0.353898386926,-0.868499788675,0.347079311977,
0.584834282657,-0.584834282657,0.562083377852,
0.675847722175,-0.675847722175,0.294040325232,
0.374639142351,-0.374639142351,0.848110267617,
0.703465137194,-0.291384800482,0.648252804699,
0.868499788675,-0.353898386926,0.347079311977
};

static int tris[NT*3]={
0,3,4,
0,4,1,
1,4,5,
1,5,2,
3,6,7,
3,7,4,
4,7,8,
4,8,5,
9,11,12,
9,12,10,
10,12,3,
10,3,0,
11,13,14,
11,14,12,
12,14,6,
12,6,3,
6,14,15,
6,15,7,
7,15,16,
7,16,8,
14,13,17,
14,17,15,
15,17,18,
15,18,16,
19,20,22,
19,22,21,
20,2,5,
20,5,22,
21,22,24,
21,24,23,
22,5,8,
22,8,24,
25,26,28,
25,28,27,
26,19,21,
26,21,28,
27,28,30,
27,30,29,
28,21,23,
28,23,30,
23,24,31,
23,31,30,
24,8,16,
24,16,31,
30,31,32,
30,32,29,
31,16,18,
31,18,32,
33,36,37,
33,37,34,
34,37,38,
34,38,35,
36,39,40,
36,40,37,
37,40,41,
37,41,38,
9,10,43,
9,43,42,
42,43,36,
42,36,33,
10,0,44,
10,44,43,
43,44,39,
43,39,36,
39,44,45,
39,45,40,
40,45,46,
40,46,41,
44,0,1,
44,1,45,
45,1,2,
45,2,46,
47,48,50,
47,50,49,
48,35,38,
48,38,50,
49,50,52,
49,52,51,
50,38,41,
50,41,52,
25,53,54,
25,54,26,
53,47,49,
53,49,54,
26,54,55,
26,55,19,
54,49,51,
54,51,55,
51,52,56,
51,56,55,
52,41,46,
52,46,56,
55,56,20,
55,20,19,
56,46,2,
56,2,20,
13,57,58,
13,58,17,
17,58,59,
17,59,18,
57,60,61,
57,61,58,
58,61,62,
58,62,59,
9,63,64,
9,64,11,
11,64,57,
11,57,13,
63,65,66,
63,66,64,
64,66,60,
64,60,57,
60,66,67,
60,67,61,
61,67,68,
61,68,62,
66,65,69,
66,69,67,
67,69,70,
67,70,68,
29,32,72,
29,72,71,
32,18,59,
32,59,72,
71,72,74,
71,74,73,
72,59,62,
72,62,74,
25,27,76,
25,76,75,
27,29,71,
27,71,76,
75,76,78,
75,78,77,
76,71,73,
76,73,78,
73,74,79,
73,79,78,
74,62,68,
74,68,79,
78,79,80,
78,80,77,
79,68,70,
79,70,80,
65,81,82,
65,82,69,
69,82,83,
69,83,70,
81,84,85,
81,85,82,
82,85,86,
82,86,83,
9,42,87,
9,87,63,
63,87,81,
63,81,65,
42,33,88,
42,88,87,
87,88,84,
87,84,81,
84,88,89,
84,89,85,
85,89,90,
85,90,86,
88,33,34,
88,34,89,
89,34,35,
89,35,90,
77,80,92,
77,92,91,
80,70,83,
80,83,92,
91,92,94,
91,94,93,
92,83,86,
92,86,94,
25,75,95,
25,95,53,
75,77,91,
75,91,95,
53,95,96,
53,96,47,
95,91,93,
95,93,96,
93,94,97,
93,97,96,
94,86,90,
94,90,97,
96,97,48,
96,48,47,
97,90,35,
97,35,48
};


static Vector3f m_normals[NV];			//The normals of the vertices
static Vector3f m_normals_inv[NV];		//The inverse normal of the vertices;

int CSphere16::_initSphereMesh(void)
{
	const Vector3f zerovec(0,0,0);				
	for (int i=0; i<NV; ++i) m_normals[i] = zerovec;

	const Vector3i *ptri = (const Vector3i*)tris;
	const Vector3f *pvert = (const Vector3f*)vert;
	for (int i=0; i<NT; ++i){
		const Vector3i t = ptri[i];
		const int a=t.x, b=t.y, c=t.z;
		const Vector3f n = compute_triangle_normal(pvert[a], pvert[b], pvert[c]);
		m_normals[a]+=n, m_normals[b]+=n, m_normals[c]+=n;
	}
	for (int i=0; i<NV; ++i){
		m_normals[i].normalize();
		m_normals_inv[i] = -m_normals[i];
	}	
	return 1;	
}


inline void DrawSolidCube(const Vector3f& v0, const Vector3f& v7)
{
	const Vector3f v1(v7.x, v0.y, v0.z);
	const Vector3f v2(v0.x, v7.y, v0.z);
	const Vector3f v3(v7.x, v7.y, v0.z);
	const Vector3f v4(v0.x, v0.y, v7.z);
	const Vector3f v5(v7.x, v0.y, v7.z);
	const Vector3f v6(v0.x, v7.y, v7.z);

	glBegin(GL_QUADS);
		glNormal3f(0, 0, -1);
		glVertex3fv((&v0.x));
		glVertex3fv((&v1.x));
		glVertex3fv((&v3.x));
		glVertex3fv((&v2.x));

		glNormal3f(0, -1, 0);
		glVertex3fv((&v0.x));
		glVertex3fv((&v1.x));
		glVertex3fv((&v5.x));
		glVertex3fv((&v4.x));

		glNormal3f(1, 0, 0);
		glVertex3fv((&v1.x));
		glVertex3fv((&v3.x));
		glVertex3fv((&v7.x));
		glVertex3fv((&v5.x));

		glNormal3f(0, 0, 1);
		glVertex3fv((&v4.x));
		glVertex3fv((&v5.x));
		glVertex3fv((&v7.x));
		glVertex3fv((&v6.x));

		glNormal3f(0, 1, 0);
		glVertex3fv((&v2.x));
		glVertex3fv((&v3.x));
		glVertex3fv((&v7.x));
		glVertex3fv((&v6.x));

		glNormal3f(-1, 0, 0);
		glVertex3fv((&v0.x));
		glVertex3fv((&v2.x));
		glVertex3fv((&v6.x));
		glVertex3fv((&v4.x));
	glEnd();
}


//Render a sphere 
//Input: r: radius, 
//       reverse_normal: use pre-computed triangle normal or its reverse	
void CSphere16::_draw(const float r, const bool reverse_normal)
{
	//prepare vertex scaling
	glScalef(r, r, r);

	//prepare normal array
	const Vector3f *pvert = (const Vector3f*)&vert[0];
	const Vector3f *pnorm = &m_normals[0];				
	const Vector3i *ptri = (Vector3i*)tris;
	if (reverse_normal) pnorm = &m_normals_inv[0];		

	//render the mesh
	drawSurfaceUsingArray(pvert, pnorm, tris, NT, 3); 
}


void CSphere16::_draw(const float3x3& mat, const bool reverse_normal)
{
	const Vector3f *pvert = (const Vector3f*)&vert[0];
	const Vector3f *pnorm = &m_normals[0];				
	const Vector3i *ptri = (Vector3i*)tris;
	
	//prepare vertex transform
	Matrix2f m; m.setIdentityMatrix();
	m.x[0][0] = mat.x[0];
	m.x[0][1] = mat.x[1];
	m.x[0][2] = mat.x[2];
	m.x[1][0] = mat.x[3];
	m.x[1][1] = mat.x[4];
	m.x[1][2] = mat.x[5];
	m.x[2][0] = mat.x[6];
	m.x[2][1] = mat.x[7];
	m.x[2][2] = mat.x[8];

	glMultMatrixf(&m.x[0][0]);
	//prepare normal array
	if (reverse_normal) pnorm = &m_normals_inv[0];		
	//render the mesh
	drawSurfaceUsingArray(pvert, pnorm, tris, NT, 3);
}


CSphere16::CSphere16(void)
{
	_initSphereMesh();
}


CSphere16::~CSphere16()
{

}


